(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{115:function(t,e,a){"use strict";a.d(e,"a",(function(){return O})),a.d(e,"b",(function(){return u}));var r=a(0),n=a.n(r);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function b(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?b(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function c(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var o=n.a.createContext({}),p=function(t){var e=n.a.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},O=function(t){var e=p(t.components);return n.a.createElement(o.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.a.createElement(n.a.Fragment,{},e)}},m=n.a.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,b=t.parentName,o=c(t,["components","mdxType","originalType","parentName"]),O=p(a),m=r,u=O["".concat(b,".").concat(m)]||O[m]||d[m]||l;return a?n.a.createElement(u,i(i({ref:e},o),{},{components:a})):n.a.createElement(u,i({ref:e},o))}));function u(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,b=new Array(l);b[0]=m;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:r,b[1]=i;for(var o=2;o<l;o++)b[o]=a[o];return n.a.createElement.apply(null,b)}return n.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},95:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return l})),a.d(e,"metadata",(function(){return b})),a.d(e,"toc",(function(){return i})),a.d(e,"default",(function(){return o}));var r=a(3),n=(a(0),a(115));const l={},b={unversionedId:"matlab/4-Operators",id:"matlab/4-Operators",isDocsHomePage:!1,title:"4-Operators",description:"Operators - Working with Scalars",source:"@site/docs/matlab/4-Operators.mdx",slug:"/matlab/4-Operators",permalink:"/docs/matlab/4-Operators",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/matlab/4-Operators.mdx",version:"current"},i=[{value:"Scalar Arithmetic Operators",id:"scalar-arithmetic-operators",children:[]},{value:"Vector Arithmetic Operators",id:"vector-arithmetic-operators",children:[]},{value:"Matrix Arithmetic Operators",id:"matrix-arithmetic-operators",children:[]},{value:"Relational Operators",id:"relational-operators",children:[]},{value:"Logical Operators",id:"logical-operators",children:[]},{value:"Bitwise Operators",id:"bitwise-operators",children:[]}],c={toc:i};function o({components:t,...e}){return Object(n.b)("wrapper",Object(r.a)({},c,e,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"operators---working-with-scalars"},"Operators - Working with Scalars"),Object(n.b)("p",null,"In MATLAB Operators work on both scalar and non-scalar data. The following are the operators available in MATLAB"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Arithmetic Operators"),Object(n.b)("li",{parentName:"ul"},"Relational Operatiors"),Object(n.b)("li",{parentName:"ul"},"Logical Operators"),Object(n.b)("li",{parentName:"ul"},"Bitwise Operators")),Object(n.b)("p",null,"Let's understand how they will perform with scalar values."),Object(n.b)("h2",{id:"scalar-arithmetic-operators"},"Scalar Arithmetic Operators"),Object(n.b)("p",null,"Let's assume, a = 22 & b = 2 "),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",{parentName:"tr",align:"center"},"Operator"),Object(n.b)("th",{parentName:"tr",align:null},"Operation"),Object(n.b)("th",{parentName:"tr",align:null},"Description"),Object(n.b)("th",{parentName:"tr",align:null},"Corresponding Functions"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"+"),Object(n.b)("td",{parentName:"tr",align:null},"Addition"),Object(n.b)("td",{parentName:"tr",align:null},"a + b, results to 24"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"plus()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"-"),Object(n.b)("td",{parentName:"tr",align:null},"Subtraction"),Object(n.b)("td",{parentName:"tr",align:null},"a - b, results to 20"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"minus()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"*"),Object(n.b)("td",{parentName:"tr",align:null},"Multiplication"),Object(n.b)("td",{parentName:"tr",align:null},"a * b, results to 44"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"times()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"/"),Object(n.b)("td",{parentName:"tr",align:null},"Right Division"),Object(n.b)("td",{parentName:"tr",align:null},"a / b, results to 22"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"rdivide()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"\\ "),Object(n.b)("td",{parentName:"tr",align:null},"Left Division (",Object(n.b)("em",{parentName:"td"},"a \\ b is  similar to b / a"),")"),Object(n.b)("td",{parentName:"tr",align:null},"a \\ b (",Object(n.b)("em",{parentName:"td"},"similar to b/a"),"), results to 0.0909"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"ldivide()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"^"),Object(n.b)("td",{parentName:"tr",align:null},"Exponentiation"),Object(n.b)("td",{parentName:"tr",align:null},"a ^ b, results to 484"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"power()"))))),Object(n.b)("h2",{id:"vector-arithmetic-operators"},"Vector Arithmetic Operators"),Object(n.b)("h2",{id:"matrix-arithmetic-operators"},"Matrix Arithmetic Operators"),Object(n.b)("h2",{id:"relational-operators"},"Relational Operators"),Object(n.b)("p",null,"Performs comparison operations and based upon the evaluation it will returns logical 1 for true and logical 0 for false."),Object(n.b)("p",null," Let's take a = 20 and b = 10"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",{parentName:"tr",align:"center"},"Operator"),Object(n.b)("th",{parentName:"tr",align:null},"Operation"),Object(n.b)("th",{parentName:"tr",align:null},"Description"),Object(n.b)("th",{parentName:"tr",align:null},"Corresponding Functions"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"<"),Object(n.b)("td",{parentName:"tr",align:null},"Less than"),Object(n.b)("td",{parentName:"tr",align:null},"a < b, results lo logical 0"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"lt()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"<="),Object(n.b)("td",{parentName:"tr",align:null},"Less than or equal to"),Object(n.b)("td",{parentName:"tr",align:null},"a <= b, results lo logical 0"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"le()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},">"),Object(n.b)("td",{parentName:"tr",align:null},"Greater than"),Object(n.b)("td",{parentName:"tr",align:null},"a > b, results lo logical 1"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"gt()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},">="),Object(n.b)("td",{parentName:"tr",align:null},"Greater than or equal to"),Object(n.b)("td",{parentName:"tr",align:null},"a >= b, results lo logical 1"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"ge()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"=="),Object(n.b)("td",{parentName:"tr",align:null},"Equal to"),Object(n.b)("td",{parentName:"tr",align:null},"a == b, results lo logical 0"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"eq()"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"center"},"~="),Object(n.b)("td",{parentName:"tr",align:null},"Not equal to"),Object(n.b)("td",{parentName:"tr",align:null},"a ~= b, results lo logical 1"),Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"ne()"))))),Object(n.b)("h2",{id:"logical-operators"},"Logical Operators"),Object(n.b)("p",null,"Logical operators perform logical operations like AND, OR, NOT, XOR and output the result in logical 1 or for true or false respectively."),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",{parentName:"tr",align:null},"Operator"),Object(n.b)("th",{parentName:"tr",align:null},"Operation"),Object(n.b)("th",{parentName:"tr",align:null},"Description"),Object(n.b)("th",{parentName:"tr",align:null},"Corresponding Functions"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},"&"),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},"|"),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},"~"),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},"xor"),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},"&&"),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},"|","|"),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null}),Object(n.b)("td",{parentName:"tr",align:null})))),Object(n.b)("h2",{id:"bitwise-operators"},"Bitwise Operators"))}o.isMDXComponent=!0}}]);