(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),b=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=b(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=b(n),m=a,d=u["".concat(r,".").concat(m)]||u[m]||s[m]||l;return n?o.a.createElement(d,i(i({ref:t},p),{},{components:n})):o.a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var p=2;p<l;p++)r[p]=n[p];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),o=n(7),l=(n(0),n(116)),r={title:"Loops"},i={unversionedId:"matlab/8-Loops",id:"matlab/8-Loops",isDocsHomePage:!1,title:"Loops",description:"Loops allows us to execute set of statements certain number of times. MATLAB provide this behaviour of execution through the following loops.",source:"@site/docs/matlab/8-Loops.mdx",slug:"/matlab/8-Loops",permalink:"/Master-Bear/docs/matlab/8-Loops",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/matlab/8-Loops.mdx",version:"current",sidebar:"MATLAB Fundass!",previous:{title:"Colon Opeartor",permalink:"/Master-Bear/docs/matlab/7-Colon-Operator"},next:{title:"Functions",permalink:"/Master-Bear/docs/matlab/9-Functions"}},c=[{value:"<code>while</code> Loop",id:"while-loop",children:[{value:"Syntax",id:"syntax",children:[]},{value:"Example",id:"example",children:[]},{value:"Output",id:"output",children:[]}]},{value:"<code>for</code> loop",id:"for-loop",children:[{value:"Syntax",id:"syntax-1",children:[]},{value:"Example - 1 :- Iterating over vector",id:"example---1---iterating-over-vector",children:[]},{value:"Output - 1",id:"output---1",children:[]},{value:"Example - 2 :- Iterating over vector generated by colon notation",id:"example---2---iterating-over-vector-generated-by-colon-notation",children:[]},{value:"Output - 2",id:"output---2",children:[]},{value:"Example - 3 :- Iterating over 2D Matrix",id:"example---3---iterating-over-2d-matrix",children:[]},{value:"Output - 3",id:"output---3",children:[]}]},{value:"<code>break</code> statement",id:"break-statement",children:[{value:"Example",id:"example-1",children:[]},{value:"Output",id:"output-1",children:[]}]},{value:"<code>continue</code> statement",id:"continue-statement",children:[{value:"Example",id:"example-2",children:[]},{value:"Output",id:"output-2",children:[]}]}],p={toc:c};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Loops allows us to execute set of statements certain number of times. MATLAB provide this behaviour of execution through the following loops."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"while")," loop"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"for")," loop")),Object(l.b)("h2",{id:"while-loop"},Object(l.b)("inlineCode",{parentName:"h2"},"while")," Loop"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"while")," loop executes the set of statements inside it as long as the ",Object(l.b)("inlineCode",{parentName:"p"},"conditional_expression")," is evaluated to ",Object(l.b)("strong",{parentName:"p"},"true"),"."),Object(l.b)("h3",{id:"syntax"},"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"while <conditional_expression>\n   <statement 1>\n   <statement 2>\n   ....\n   ....\n   <statement n>\n\nend\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"while")," loop executes the set of statements inside it as long as the ",Object(l.b)("inlineCode",{parentName:"p"},"conditional_expression")," is evaluated to ",Object(l.b)("strong",{parentName:"p"},"true"),"."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"while")," loop evaluates the ",Object(l.b)("inlineCode",{parentName:"li"},"conditional_expression"),"."),Object(l.b)("li",{parentName:"ul"},"If the ",Object(l.b)("inlineCode",{parentName:"li"},"conditional_expression")," is ",Object(l.b)("strong",{parentName:"li"},"true"),", statements inside the body of ",Object(l.b)("inlineCode",{parentName:"li"},"while")," loop are executed. Then, the ",Object(l.b)("inlineCode",{parentName:"li"},"conditional_expression")," is evaluated again."),Object(l.b)("li",{parentName:"ul"},"The process goes on until the test expression is evaluated to ",Object(l.b)("strong",{parentName:"li"},"false"),"."),Object(l.b)("li",{parentName:"ul"},"If the test expression is false, the loop terminates (ends).")),Object(l.b)("p",null,Object(l.b)("img",{parentName:"p",src:"https://cdn.programiz.com/sites/tutorial2program/files/c-while-loop_0.jpg",alt:"flowchart of while loop in C programming"})),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"conditional_expression")," is termed to be ",Object(l.b)("strong",{parentName:"p"},"true")," only when it is evaluated to non-empty and contains all non-zero elements(logical 1 or real numbers). Otherwise, the ",Object(l.b)("inlineCode",{parentName:"p"},"conditional_expression")," is ",Object(l.b)("strong",{parentName:"p"},"false")),Object(l.b)("h3",{id:"example"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"a = 10;\n\n% while loop execution \nwhile( a < 20 )\n   fprintf('value of a: %d\\n', a);\n   a = a + 1; % avoiding loop from entering into infinite loop - while loop-control condition\n\nend\n")),Object(l.b)("h3",{id:"output"},"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"value of a: 10\nvalue of a: 11\nvalue of a: 12\nvalue of a: 13\nvalue of a: 14\nvalue of a: 15\nvalue of a: 16\nvalue of a: 17\nvalue of a: 18\nvalue of a: 19\n")),Object(l.b)("h2",{id:"for-loop"},Object(l.b)("inlineCode",{parentName:"h2"},"for")," loop"),Object(l.b)("h3",{id:"syntax-1"},"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"for <var> = <values>\n   <statement 1>\n  <statement 2>\n  ....\n  ....\n  ....\n  <statement n>\n  \nend\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"<values>")," can be a vector/array or generated vector using colon notation."),Object(l.b)("h3",{id:"example---1---iterating-over-vector"},"Example - 1 :- Iterating over vector"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"for a = [24,18,17,23,28]\n   disp(a)\nend\n")),Object(l.b)("h3",{id:"output---1"},"Output - 1"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"24\n18\n17\n23\n28\n")),Object(l.b)("h3",{id:"example---2---iterating-over-vector-generated-by-colon-notation"},"Example - 2 :- Iterating over vector generated by colon notation"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"for a = 1.0: -0.1: 0.0\n   disp(a)\nend\n")),Object(l.b)("h3",{id:"output---2"},"Output - 2"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"1\n0.90000\n0.80000\n0.70000\n0.60000\n0.50000\n0.40000\n0.30000\n0.20000\n0.10000\n0\n")),Object(l.b)("h3",{id:"example---3---iterating-over-2d-matrix"},"Example - 3 :- Iterating over 2D Matrix"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},'mat = [1 2 3; 4 5 6; 7 8 9];\ndisp(mat);\n\nfor m = mat\n    fprintf("%d\\n",m);\nend\n')),Object(l.b)("h3",{id:"output---3"},"Output - 3"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"1\n4\n7\n2\n5\n8\n3\n6\n9\n")),Object(l.b)("p",null,"When iterating over matrices, the flow of iteration will go along with the columns"),Object(l.b)("h1",{id:"loop-control-statements"},"Loop Control Statements"),Object(l.b)("p",null,"Loop control statements changes the flow of execution inside the loop. MATLAB supports both ",Object(l.b)("inlineCode",{parentName:"p"},"break")," and ",Object(l.b)("inlineCode",{parentName:"p"},"continue")," statements"),Object(l.b)("h2",{id:"break-statement"},Object(l.b)("inlineCode",{parentName:"h2"},"break")," statement"),Object(l.b)("p",null,"Whenever execution control encounters ",Object(l.b)("inlineCode",{parentName:"p"},"break")," statement the immediatly if terminates the execution of the respective loop either it may be ",Object(l.b)("inlineCode",{parentName:"p"},"while")," or ",Object(l.b)("inlineCode",{parentName:"p"},"for")," loop."),Object(l.b)("p",null,Object(l.b)("img",{parentName:"p",src:"https://www.tutorialspoint.com/matlab/images/cpp_break_statement.jpg",alt:"MATLAB break statement"})),Object(l.b)("h3",{id:"example-1"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"a =10;\n\n% while loop execution \nwhile(a <20)\n   fprintf('value of a: %d\\n',a);\n   a =a+1;\n\n   if(a >15)%terminate the loop using break statement \n      break;\n      fprintf(\"This is after break statement which will not execute\");\n  end\n\nend\n")),Object(l.b)("h3",{id:"output-1"},"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"value of a: 10\nvalue of a: 11\nvalue of a: 12\nvalue of a: 13\nvalue of a: 14\nvalue of a: 15\n")),Object(l.b)("p",null,"As soon as ",Object(l.b)("inlineCode",{parentName:"p"},"a")," value becomes greater than 15, if condition at line 8 is satisfied and executed the break statement which will terminate the ",Object(l.b)("inlineCode",{parentName:"p"},"while")," loop. However the ",Object(l.b)("inlineCode",{parentName:"p"},"fprintf()")," after the ",Object(l.b)("inlineCode",{parentName:"p"},"break")," statement will not execute because the control of execution will come out of the loop as soon as ",Object(l.b)("inlineCode",{parentName:"p"},"break")," statement is encountered."),Object(l.b)("h2",{id:"continue-statement"},Object(l.b)("inlineCode",{parentName:"h2"},"continue")," statement"),Object(l.b)("p",null,"In for and while loop",Object(l.b)("inlineCode",{parentName:"p"},"continue")," statement is used to pass the execution control to the next iteration by skiping the statements below it."),Object(l.b)("p",null,Object(l.b)("img",{parentName:"p",src:"https://www.tutorialspoint.com/matlab/images/cpp_continue_statement.jpg",alt:"MATLAB continue statement"})),Object(l.b)("h3",{id:"example-2"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"a = 9;\n\n%while loop execution \nwhile a < 20\n   a = a + 1; \n   if a == 15\n      % skip the iteration \n      continue;\n   end \n    fprintf('value of a: %d\\n', a);\n\nend\n")),Object(l.b)("h3",{id:"output-2"},"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-matlab"},"value of a: 10\nvalue of a: 11\nvalue of a: 12\nvalue of a: 13\nvalue of a: 14\nvalue of a: 16\nvalue of a: 17\nvalue of a: 18\nvalue of a: 19\nvalue of a: 20\n")),Object(l.b)("p",null,"In the above example, when the value of ",Object(l.b)("inlineCode",{parentName:"p"},"a")," becomes 15 which satisfies the ",Object(l.b)("inlineCode",{parentName:"p"},"if")," statement and triggers the ",Object(l.b)("inlineCode",{parentName:"p"},"continue")," statement which will end up skipping the current iteration and control goes back to the loop again.c"))}b.isMDXComponent=!0}}]);