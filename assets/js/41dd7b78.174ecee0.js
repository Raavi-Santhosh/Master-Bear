(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{115:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},b=Object.keys(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,b=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,m=d["".concat(i,".").concat(u)]||d[u]||s[u]||b;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var b=n.length,i=new Array(b);i[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<b;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),b=(n(0),n(115)),i={id:"data-types",slug:"matlab-data-types",title:"Data Types"},l={unversionedId:"matlab/data-types",id:"matlab/data-types",isDocsHomePage:!1,title:"Data Types",description:"Data Types",source:"@site/docs/matlab/2-Data-Types.mdx",slug:"/matlab/matlab-data-types",permalink:"/Master-Bear/docs/matlab/matlab-data-types",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/matlab/2-Data-Types.mdx",version:"current"},o=[{value:"Numerical Array Types",id:"numerical-array-types",children:[{value:"Integer Types",id:"integer-types",children:[]},{value:"Float Type",id:"float-type",children:[]},{value:"MATLAB Functions Associated with Data Types",id:"matlab-functions-associated-with-data-types",children:[]}]}],c={toc:o};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"data-types"},"Data Types"),Object(b.b)("p",null,"The basic data type in MATLAB is the array or matrix. Matlab has 15 fundamental data types where each data type is in the build type of an array or matrix."),Object(b.b)("p",null,Object(b.b)("img",{parentName:"p",src:"https://static.javatpoint.com/tutorial/matlab/images/matlab-data-types.png",alt:"MATLAB Data Types"})),Object(b.b)("h2",{id:"numerical-array-types"},"Numerical Array Types"),Object(b.b)("p",null,"Numerical types in MATLAB contains Integers (Non-fractional values) and Floats (fractional values). By default, all numerical values in MATLAB are floating point numbers with double-precision ."),Object(b.b)("h3",{id:"integer-types"},"Integer Types"),Object(b.b)("p",null,"Even in Integers, MATLAB has four signed and four unsigned integer array types."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Unsigned Integers -")," Unsigned integers can only hold values greater than or equal to zero (>=0) i.e., only positive values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Signed Integers -")," Signed types enable to work with a negative integer as well as  positive as Most SIgnificant Bit is reserved to indicate the sign of the number."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"SIgned Integers vs Unsigned Integers")),Object(b.b)("p",null,"Signed integers cannot perform as wide a range of number as the unsigned integer type because one bit is used to designate positive or negative signs for the number. Unsigned types give a wider range of numbers, but these numbers can only be zero or positive."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Integer Data Type"),Object(b.b)("th",{parentName:"tr",align:null},"Range of Values"),Object(b.b)("th",{parentName:"tr",align:null},"Type Conversion Function"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"8-Bit Signed Integer"),Object(b.b)("td",{parentName:"tr",align:null},"-128 to 127"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"int8()"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"8-Bit Unsigned Integer"),Object(b.b)("td",{parentName:"tr",align:null},"0 to 255"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"uint8()"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"16-Bit Signed Integer"),Object(b.b)("td",{parentName:"tr",align:null},"32768 to 32767"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"int16()"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"16-Bit Unsigned Integer"),Object(b.b)("td",{parentName:"tr",align:null},"0 to 65535"),Object(b.b)("td",{parentName:"tr",align:null},"uint16()")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"32-Bit Signed Integer"),Object(b.b)("td",{parentName:"tr",align:null},"-2147483648 to 2147483647"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"int32()"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"32-Bit Unsigned Integer"),Object(b.b)("td",{parentName:"tr",align:null},"0 to 4294967295"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"unit32()"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"64-BIt Signed Integer"),Object(b.b)("td",{parentName:"tr",align:null},"-2^63 to 2^63-1"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"int64()"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},"64-Bit Unsigned Integer"),Object(b.b)("td",{parentName:"tr",align:null},"0 to 2^64"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"uint64()"))))),Object(b.b)("h3",{id:"float-type"},"Float Type"),Object(b.b)("p",null,"MATLAB show floating-point numbers in either double-precision or single-precision format. The default is double-precision, but we can convert that to of single-precision with a simple conversion function."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Double-Percision Floating Point Number")),Object(b.b)("p",null,"MATLAB composes the double data type according to IEEE Standard 754 for  double precision. Any value stored as a double-needed 64 bits, formatted as shown in the table below:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Bits"),Object(b.b)("th",{parentName:"tr",align:null},"Usage"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"51 to 0"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"62 to 52"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"63"),Object(b.b)("td",{parentName:"tr",align:null},"Sign (Positive = 0, Negative = 1)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Type Conversion Function")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"double()"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Single-Percision Floating Point Number")),Object(b.b)("p",null,"MATLAB composes the double data type according to IEEE Standard 754 for  double precision. Any value stored as a single-needed 32 bits, formatted as shown in the table below:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Bits"),Object(b.b)("th",{parentName:"tr",align:null},"Usage"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"22 to 0"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"30 to 23"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"31"),Object(b.b)("td",{parentName:"tr",align:null},"Sign (Positive = 0, Negative = 1)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Type Conversion Function")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("inlineCode",{parentName:"td"},"single()"))))),Object(b.b)("h3",{id:"matlab-functions-associated-with-data-types"},"MATLAB Functions Associated with Data Types"))}p.isMDXComponent=!0}}]);